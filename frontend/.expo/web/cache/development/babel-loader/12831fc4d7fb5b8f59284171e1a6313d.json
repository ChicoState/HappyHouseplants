{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/dylan/HappyHouseplants/frontend/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Calendar } from 'react-native-calendars';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport React from 'react';\n\nvar Example = function (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  var _super = _createSuper(Example);\n\n  function Example() {\n    _classCallCheck(this, Example);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Example, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 7\n        }\n      }, React.createElement(Calendar, {\n        style: {\n          borderWidth: 5,\n          borderColor: 'green',\n          height: 400\n        },\n        theme: {\n          backgroundColor: '#ffffff',\n          calendarBackground: '#ffffff',\n          textSectionTitleColor: 'black',\n          textSectionTitleDisabledColor: '#d9e1e8',\n          selectedDayBackgroundColor: '#00adf5',\n          selectedDayTextColor: '#ffffff',\n          todayTextColor: '#00adf5',\n          dayTextColor: '#2d4150',\n          textDisabledColor: 'red',\n          dotColor: '#00adf5',\n          selectedDotColor: '#ffffff',\n          arrowColor: 'green',\n          disabledArrowColor: '#d9e1e8',\n          monthTextColor: 'green',\n          indicatorColor: 'blue',\n          textDayFontFamily: 'monospace',\n          textMonthFontFamily: 'monospace',\n          textDayHeaderFontFamily: 'monospace',\n          textDayFontWeight: '300',\n          textMonthFontWeight: 'bold',\n          textDayHeaderFontWeight: '300',\n          textDayFontSize: 20,\n          textMonthFontSize: 28,\n          textDayHeaderFontSize: 17\n        },\n        markedDates: {\n          '2020-09-25': {\n            selected: true,\n            marked: true,\n            selectedColor: 'green'\n          },\n          '2020-09-29': {\n            marked: true\n          },\n          '2020-09-30': {\n            marked: true,\n            dotColor: 'red',\n            activeOpacity: 0\n          },\n          '2020-09-28': {\n            disabled: true,\n            disableTouchEvent: true\n          }\n        },\n        current: '2020-09-23',\n        minDate: '2020-01-01',\n        maxDate: '2020-12-30',\n        onDayPress: function onDayPress(day) {\n          console.log('selected day', day);\n        },\n        monthFormat: 'MMMM yyyy',\n        onMonthChange: function onMonthChange(month) {\n          console.log('month changed', month);\n        },\n        hideArrows: false,\n        hideExtraDays: true,\n        disableMonthChange: true,\n        firstDay: 1,\n        enableSwipeMonths: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, \"Green = Seed Ready\"));\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport { Example as default };","map":{"version":3,"sources":["/home/dylan/HappyHouseplants/frontend/App.js"],"names":["Calendar","React","Example","borderWidth","borderColor","height","backgroundColor","calendarBackground","textSectionTitleColor","textSectionTitleDisabledColor","selectedDayBackgroundColor","selectedDayTextColor","todayTextColor","dayTextColor","textDisabledColor","dotColor","selectedDotColor","arrowColor","disabledArrowColor","monthTextColor","indicatorColor","textDayFontFamily","textMonthFontFamily","textDayHeaderFontFamily","textDayFontWeight","textMonthFontWeight","textDayHeaderFontWeight","textDayFontSize","textMonthFontSize","textDayHeaderFontSize","selected","marked","selectedColor","activeOpacity","disabled","disableTouchEvent","day","console","log","month","Component"],"mappings":";;;;;;;;;;;AAAA,SAAQA,QAAR,QAAuB,wBAAvB;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;IAEqBC,O;;;;;;;;;;;;;6BACV;AACP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,KAAK,EAAE;AAACC,UAAAA,WAAW,EAAE,CAAd;AAAiBC,UAAAA,WAAW,EAAE,OAA9B;AAAuCC,UAAAA,MAAM,EAAE;AAA/C,SADT;AAEE,QAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAE,SADZ;AAELC,UAAAA,kBAAkB,EAAE,SAFf;AAGLC,UAAAA,qBAAqB,EAAE,OAHlB;AAILC,UAAAA,6BAA6B,EAAE,SAJ1B;AAKLC,UAAAA,0BAA0B,EAAE,SALvB;AAMLC,UAAAA,oBAAoB,EAAE,SANjB;AAOLC,UAAAA,cAAc,EAAE,SAPX;AAQLC,UAAAA,YAAY,EAAE,SART;AASLC,UAAAA,iBAAiB,EAAE,KATd;AAULC,UAAAA,QAAQ,EAAE,SAVL;AAWLC,UAAAA,gBAAgB,EAAE,SAXb;AAYLC,UAAAA,UAAU,EAAE,OAZP;AAaLC,UAAAA,kBAAkB,EAAE,SAbf;AAcLC,UAAAA,cAAc,EAAE,OAdX;AAeLC,UAAAA,cAAc,EAAE,MAfX;AAgBLC,UAAAA,iBAAiB,EAAE,WAhBd;AAiBLC,UAAAA,mBAAmB,EAAE,WAjBhB;AAkBLC,UAAAA,uBAAuB,EAAE,WAlBpB;AAmBLC,UAAAA,iBAAiB,EAAE,KAnBd;AAoBLC,UAAAA,mBAAmB,EAAE,MApBhB;AAqBLC,UAAAA,uBAAuB,EAAE,KArBpB;AAsBLC,UAAAA,eAAe,EAAE,EAtBZ;AAuBLC,UAAAA,iBAAiB,EAAE,EAvBd;AAwBLC,UAAAA,qBAAqB,EAAE;AAxBlB,SAFT;AA6BE,QAAA,WAAW,EAAE;AACX,wBAAc;AACZC,YAAAA,QAAQ,EAAE,IADE;AAEZC,YAAAA,MAAM,EAAE,IAFI;AAGZC,YAAAA,aAAa,EAAE;AAHH,WADH;AAMX,wBAAc;AAACD,YAAAA,MAAM,EAAE;AAAT,WANH;AAOX,wBAAc;AAACA,YAAAA,MAAM,EAAE,IAAT;AAAehB,YAAAA,QAAQ,EAAE,KAAzB;AAAgCkB,YAAAA,aAAa,EAAE;AAA/C,WAPH;AAQX,wBAAc;AAACC,YAAAA,QAAQ,EAAE,IAAX;AAAiBC,YAAAA,iBAAiB,EAAE;AAApC;AARH,SA7Bf;AAwCE,QAAA,OAAO,EAAE,YAxCX;AA0CE,QAAA,OAAO,EAAE,YA1CX;AA4CE,QAAA,OAAO,EAAE,YA5CX;AA8CE,QAAA,UAAU,EAAE,oBAACC,GAAD,EAAS;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACD,SAhDH;AAkDE,QAAA,WAAW,EAAE,WAlDf;AAoDE,QAAA,aAAa,EAAE,uBAACG,KAAD,EAAW;AACxBF,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,KAA7B;AACD,SAtDH;AAwDE,QAAA,UAAU,EAAE,KAxDd;AA0DE,QAAA,aAAa,EAAE,IA1DjB;AA6DE,QAAA,kBAAkB,EAAE,IA7DtB;AA+DE,QAAA,QAAQ,EAAE,CA/DZ;AAiEE,QAAA,iBAAiB,EAAE,IAjErB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAoEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BApEF,CADF;AAwED;;;;EA1EkCtC,KAAK,CAACuC,S;;SAAtBtC,O","sourcesContent":["import {Calendar} from 'react-native-calendars';\nimport {View, Text} from 'react-native';\nimport React from 'react';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <View>\n        <Calendar\n          style={{borderWidth: 5, borderColor: 'green', height: 400}}\n          theme={{\n            backgroundColor: '#ffffff',\n            calendarBackground: '#ffffff',\n            textSectionTitleColor: 'black',\n            textSectionTitleDisabledColor: '#d9e1e8',\n            selectedDayBackgroundColor: '#00adf5',\n            selectedDayTextColor: '#ffffff',\n            todayTextColor: '#00adf5',\n            dayTextColor: '#2d4150',\n            textDisabledColor: 'red',\n            dotColor: '#00adf5',\n            selectedDotColor: '#ffffff',\n            arrowColor: 'green',\n            disabledArrowColor: '#d9e1e8',\n            monthTextColor: 'green',\n            indicatorColor: 'blue',\n            textDayFontFamily: 'monospace',\n            textMonthFontFamily: 'monospace',\n            textDayHeaderFontFamily: 'monospace',\n            textDayFontWeight: '300',\n            textMonthFontWeight: 'bold',\n            textDayHeaderFontWeight: '300',\n            textDayFontSize: 20,\n            textMonthFontSize: 28,\n            textDayHeaderFontSize: 17,\n          }}\n          // Collection of dates that have to be marked. Default = {}\n          markedDates={{\n            '2020-09-25': {\n              selected: true,\n              marked: true,\n              selectedColor: 'green',\n            },\n            '2020-09-29': {marked: true},\n            '2020-09-30': {marked: true, dotColor: 'red', activeOpacity: 0},\n            '2020-09-28': {disabled: true, disableTouchEvent: true},\n          }}\n          // Initially visible month. Default = Date()\n          current={'2020-09-23'}\n          // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n          minDate={'2020-01-01'}\n          // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n          maxDate={'2020-12-30'}\n          // Handler which gets executed on day press. Default = undefined\n          onDayPress={(day) => {\n            console.log('selected day', day);\n          }}\n          // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\n          monthFormat={'MMMM yyyy'}\n          // Handler which gets executed when visible month changes in calendar. Default = undefined\n          onMonthChange={(month) => {\n            console.log('month changed', month);\n          }}\n          // Hide month navigation arrows. Default = false\n          hideArrows={false}\n          // Do not show days of other months in month page. Default = false\n          hideExtraDays={true}\n          // If hideArrows=false and hideExtraDays=false do not swich month when tapping on greyed out\n          // day from another month that is visible in calendar page. Default = false\n          disableMonthChange={true}\n          // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday.\n          firstDay={1}\n          // Enable the option to swipe between months. Default = false\n          enableSwipeMonths={true}\n        />\n        <Text>Green = Seed Ready</Text>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}